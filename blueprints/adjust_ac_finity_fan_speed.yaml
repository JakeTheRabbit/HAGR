blueprint:
  name: Adjust Fan Speed Based on Temperature
  description: |
    Adjusts fan speed based on temperature and time of day.
    
    ## Logic:
    - This automation adjusts the fan speed to maintain the desired temperature range during the day and night.
    - The fan speed is controlled based on the current temperature compared to the target temperature.
    - During the day (between the lights on and off times), it uses the day temperature target.
    - During the night, it uses the night temperature target.
    - The fan speed is increased or decreased gradually with a delay to prevent rapid changes.
    
    ## Decisions:
    - If the current temperature is more than 1°C above the target, the fan speed is increased.
    - If the current temperature is more than 1°C below the target, the fan speed is decreased.
    - If the current temperature is within 1°C of the target, the fan speed remains unchanged.
    
    ## Limitations:
    - The fan speed is limited to a range of 0 to 10.
    - The automation includes a delay to prevent rapid changes.
    
    ## Time Lengths:
    - The automation triggers at the specified interval to ensure the fan speed is checked and adjusted periodically.
    - Additional triggers are set for changes in the current temperature and the day/night temperature targets.

  domain: automation
  input:
    current_temp_entity:
      name: Current Temperature Sensor
      description: The entity ID of the current temperature sensor (e.g., sensor.esppoe_3_scd_41_poe3_temperature).
      selector:
        entity:
          domain: sensor
    day_temp_target:
      name: Day Temperature Target
      description: The entity ID of the input number for the day temperature target (e.g., input_number.1_5_day_temperature_target).
      selector:
        entity:
          domain: input_number
    night_temp_target:
      name: Night Temperature Target
      description: The entity ID of the input number for the night temperature target (e.g., input_number.1_5_night_temperature_target).
      selector:
        entity:
          domain: input_number
    fan_speed_entity:
      name: Fan Speed Control
      description: The entity ID of the fan speed control (0-10) (e.g., number.1_5_port_1_on_speed).
      selector:
        entity:
          domain: number
    time_pattern_for_fan_speed_adjustment:
      name: Time Pattern for Fan Speed Adjustment
      description: The time pattern for triggering fan speed adjustments.
      selector:
        entity:
          domain: input_datetime
    interval_minutes:
      name: Interval Minutes
      description: The interval in minutes for periodically checking the temperature and adjusting the fan speed.
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: "minutes"
          step: 1
    delay_minutes:
      name: Delay Minutes
      description: The delay time in minutes between successive fan speed adjustments.
      selector:
        number:
          min: 1
          max: 10
          unit_of_measurement: "minutes"
          step: 1

trigger:
  - platform: state
    entity_id:
      - !input current_temp_entity
      - !input day_temp_target
      - !input night_temp_target
      - !input fan_speed_entity
      - !input time_pattern_for_fan_speed_adjustment
      - !input interval_minutes
      - !input delay_minutes
  - platform: time_pattern
    minutes: "/1"

condition:
  - condition: template
    value_template: >
      {% set current_time = now().replace(second=0, microsecond=0) %}
      {% set desired_time = state_attr('input_datetime.time_pattern_for_fan_speed_adjustment', 'timestamp') %}
      {{ current_time.hour == desired_time.hour and current_time.minute == desired_time.minute }}

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ states('input_datetime.time_pattern_for_fan_speed_adjustment') != 'unknown' }}"
        sequence:
          - variables:
              current_temp_entity: !input current_temp_entity
              target_temp_entity: !input day_temp_target
              fan_speed_entity: !input fan_speed_entity
              current_temp: "{{ states(current_temp_entity) | float(default=0) }}"
              target_temp: "{{ states(target_temp_entity) | float(default=0) }}"
              current_speed: "{{ states(fan_speed_entity) | float(default=0) }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {{ current_temp not in ['unknown', 'unavailable'] and target_temp not in ['unknown', 'unavailable'] }}
                sequence:
                  - variables:
                      current_temp: "{{ current_temp | float }}"
                      target_temp: "{{ target_temp | float }}"
                      new_speed: >
                        {% if current_temp > target_temp + 1 %}
                          {{ [current_speed + 1, 10] | min }}
                        {% elif current_temp < target_temp - 1 %}
                          {{ [current_speed - 1, 0] | max }}
                        {% else %}
                          {{ current_speed }}
                        {% endif %}
                  - service: number.set_value
                    target:
                      entity_id: !input fan_speed_entity
                    data:
                      value: "{{ new_speed }}"
                  - delay:
                      minutes: !input delay_minutes
              - conditions:
                  - condition: template
                    value_template: >
                      {{ current_temp in ['unknown', 'unavailable'] or target_temp in ['unknown', 'unavailable'] }}
                sequence:
                  - service: number.set_value
                    target:
                      entity_id: !input fan_speed_entity
                    data:
                      value: "{{ current_speed }}"
      - conditions:
          - condition: template
            value_template: "{{ states('input_datetime.time_pattern_for_fan_speed_adjustment') == 'unknown' }}"
        sequence:
          - service: persistent_notification.create
            data:
              message: "Please set the time pattern for fan speed adjustment."
              title: "Fan Speed Adjustment"
