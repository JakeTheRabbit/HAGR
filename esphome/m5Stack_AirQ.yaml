# Feature List: Air-Q Smart Environmental Sensor System
# ----------------------------------------------------------------------------------

# Core Hardware Components
# ----------------------------------------------------------------------------------
# ESP32-S3 microcontroller with Wi-Fi/Bluetooth connectivity
# E-Paper 1.54" display for low power operation
# SCD4x CO2 sensor (high precision NDIR technology)
# SEN5x environmental sensor suite
# PCF8563 real-time clock for time keeping during power loss
# RGB LED for status indication
# Physical buttons for manual interaction

# Environmental Monitoring
# ----------------------------------------------------------------------------------
# CO2 measurement (400-5000ppm range)
# Particulate matter monitoring (PM1.0, PM2.5, PM4.0, PM10.0)
# VOC (Volatile Organic Compounds) index with air quality classification
# NOx (Nitrogen Oxides) index with air quality classification
# Temperature monitoring with dual sensor cross-checking
# Humidity monitoring with dual sensor cross-checking
# Automatic sensor calibration system

# Connectivity & Integration
# ----------------------------------------------------------------------------------
# Wi-Fi connectivity with fallback access point
# Home Assistant integration via ESPHome
# Local web interface for direct device access
# Encrypted API communication
# Over-the-air (OTA) firmware updates
# Time synchronization via SNTP
# Captive portal for easy initial setup

# Advanced Features
# ----------------------------------------------------------------------------------
# Sensor calibration system with reference value input
# Auto-cleaning function for particulate matter sensor
# Forced calibration for CO2 sensor
# Temperature and humidity compensation for altitude
# VOC/NOx algorithm tuning for improved accuracy
# Display auto-refresh with customizable data presentation
# Low power operation with sensor scheduling

# User Interface
# ----------------------------------------------------------------------------------
# E-Paper display showing:
#   - Time and date
#   - Device identification
#   - All sensor readings
#   - Wi-Fi connection status
#   - Last update timestamp
# Interactive buttons for display refresh and manual functions
# RGB status LED for visual indication
# Web interface for advanced configuration

# System Management
# ----------------------------------------------------------------------------------
# Diagnostic sensors for system health monitoring
# Configuration backup and restore
# Persistent storage of calibration values
# Automatic sensor data validation and filtering
# Comprehensive logging system
# Remote restart capability
# Easy firmware update process


substitutions:
  devicename: air-q
  friendlyname: AirQ
  location: Office
  sensor_interval: 15s
  altitude_compensation: "15m"
  ap_password: "airq-device"

esphome:
  name: ${devicename}
  friendly_name: ${friendlyname}
  area: ${location}
  platformio_options:
    board_build.mcu: esp32s3
    board_build.name: "M5Stack StampS3"
    board_build.upload.flash_size: 8MB
    board_build.upload.maximum_size: 8388608
    board_build.vendor: M5Stack
  on_boot:
    - priority: 800
      then:
        - output.turn_on: enable
    - priority: 800
      then:
        - pcf8563.read_time

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  framework:
    type: arduino

logger:

api:
  encryption:
    key: ""

ota:
  - platform: esphome
    password: ""
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "${devicename} Fallback Hotspot"
    password: "${ap_password}"

captive_portal:

web_server:
  port: 80
  include_internal: true

i2c:
  sda: GPIO11
  scl: GPIO12
  scan: true
  frequency: 50kHz
  id: bus_a

spi:
  clk_pin: GPIO05
  mosi_pin: GPIO06

output:
  - platform: gpio
    pin: GPIO10
    id: enable

time:
  - platform: pcf8563
    address: 0x51
    update_interval: 10min
  - platform: sntp
    id: sntp_time
    timezone: Pacific/Auckland
    on_time_sync:
      then:
        pcf8563.write_time:

light:
  - platform: esp32_rmt_led_strip
    rgb_order: GRB
    pin: GPIO21
    num_leds: 1
    rmt_channel: 0
    chipset: SK6812
    name: "LED"
    restore_mode: ALWAYS_OFF
    id: id_led

# Global variables for calibration factors
globals:
  - id: sen55_temp_factor
    type: float
    restore_value: true
    initial_value: '1.0'
  - id: co2_temp_factor
    type: float
    restore_value: true
    initial_value: '1.0'
  - id: sen55_humidity_factor
    type: float
    restore_value: true
    initial_value: '1.0'
  - id: co2_humidity_factor
    type: float
    restore_value: true
    initial_value: '1.0'

sensor:
  - platform: scd4x
    co2:
      name: CO2
      id: CO2
      filters:
        - lambda: |-
            float MIN_VALUE = 300.0;
            float MAX_VALUE = 5000.0;
            if (MIN_VALUE <= x && x <= MAX_VALUE) return x;
            else return {};
    temperature:
      name: CO2 Temperature
      id: CO2_temperature
      filters:
        - lambda: |-
            float MIN_VALUE = 0.0;
            float MAX_VALUE = 100.0;
            if (MIN_VALUE <= x && x <= MAX_VALUE) return x;
            else return {};
    humidity:
      name: CO2 Humidity
      id: CO2_humidity
      filters:
        - lambda: |-
            float MIN_VALUE = 0.0;
            float MAX_VALUE = 100.0;
            if (MIN_VALUE <= x && x <= MAX_VALUE) return x;
            else return {};
    altitude_compensation: ${altitude_compensation}
    address: 0x62
    update_interval: ${sensor_interval}

  - platform: sen5x
    id: sen55
    pm_1_0:
      name: "PM 1"
      id: PM1_0
      accuracy_decimals: 2
    pm_2_5:
      name: "PM 2.5"
      id: PM2_5
      accuracy_decimals: 2
    pm_4_0:
      name: "PM 4"
      id: PM4_0
      accuracy_decimals: 2
    pm_10_0:
      name: "PM 10"
      id: PM10_0
      accuracy_decimals: 2
    temperature:
      name: "SEN55 Temperature"
      id: sen55_temperature
      accuracy_decimals: 2
    humidity:
      name: "SEN55 Humidity"
      id: sen55_humidity
      accuracy_decimals: 2
    voc:
      name: VOC
      id: voc
      accuracy_decimals: 2
      algorithm_tuning:
        index_offset: 100
        learning_time_offset_hours: 12
        learning_time_gain_hours: 12
        gating_max_duration_minutes: 180
        std_initial: 50
        gain_factor: 230
    nox:
      name: NOX
      id: nox
      accuracy_decimals: 2
      algorithm_tuning:
        index_offset: 100
        learning_time_offset_hours: 12
        learning_time_gain_hours: 12
        gating_max_duration_minutes: 180
        std_initial: 50
        gain_factor: 230
    temperature_compensation:
      offset: 0
      normalized_offset_slope: 0
      time_constant: 0
    acceleration_mode: low
    store_baseline: true
    address: 0x69
    update_interval: ${sensor_interval}

  # Add temperature calibration adjustment factor sensors (for display only)
  - platform: template
    name: "SEN55 Temperature Calibration Factor"
    id: sen55_temp_factor_sensor
    accuracy_decimals: 4
    update_interval: never
    entity_category: "diagnostic"
    unit_of_measurement: ""
    lambda: |-
      return id(sen55_temp_factor);

  - platform: template
    name: "CO2 Temperature Calibration Factor"
    id: co2_temp_factor_sensor
    accuracy_decimals: 4
    update_interval: never
    entity_category: "diagnostic"
    unit_of_measurement: ""
    lambda: |-
      return id(co2_temp_factor);

  # Add humidity calibration adjustment factor sensors (for display only)
  - platform: template
    name: "SEN55 Humidity Calibration Factor"
    id: sen55_humidity_factor_sensor
    accuracy_decimals: 4
    update_interval: never
    entity_category: "diagnostic"
    unit_of_measurement: ""
    lambda: |-
      return id(sen55_humidity_factor);

  - platform: template
    name: "CO2 Humidity Calibration Factor"
    id: co2_humidity_factor_sensor
    accuracy_decimals: 4
    update_interval: never
    entity_category: "diagnostic"
    unit_of_measurement: ""
    lambda: |-
      return id(co2_humidity_factor);

  # Calibrated sensor readings
  - platform: template
    name: "SEN55 Calibrated Temperature"
    id: sen55_calibrated_temperature
    lambda: |-
      if (id(sen55_temperature).has_state()) {
        return id(sen55_temperature).state * id(sen55_temp_factor);
      }
      return {};
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"
    update_interval: ${sensor_interval}
    accuracy_decimals: 2

  - platform: template
    name: "CO2 Calibrated Temperature"
    id: co2_calibrated_temperature
    lambda: |-
      if (id(CO2_temperature).has_state()) {
        return id(CO2_temperature).state * id(co2_temp_factor);
      }
      return {};
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"
    update_interval: ${sensor_interval}
    accuracy_decimals: 2

  - platform: template
    name: "SEN55 Calibrated Humidity"
    id: sen55_calibrated_humidity
    lambda: |-
      if (id(sen55_humidity).has_state()) {
        return id(sen55_humidity).state * id(sen55_humidity_factor);
      }
      return {};
    unit_of_measurement: "%"
    device_class: "humidity"
    state_class: "measurement"
    update_interval: ${sensor_interval}
    accuracy_decimals: 2

  - platform: template
    name: "CO2 Calibrated Humidity"
    id: co2_calibrated_humidity
    lambda: |-
      if (id(CO2_humidity).has_state()) {
        return id(CO2_humidity).state * id(co2_humidity_factor);
      }
      return {};
    unit_of_measurement: "%"
    device_class: "humidity"
    state_class: "measurement"
    update_interval: ${sensor_interval}
    accuracy_decimals: 2

  # Main temperature and humidity sensors (calibrated averages)
  - platform: template
    name: Temperature
    id: temperature
    lambda: |-
      if (id(sen55_calibrated_temperature).has_state() && id(co2_calibrated_temperature).has_state()) {
        return (id(sen55_calibrated_temperature).state + id(co2_calibrated_temperature).state) / 2;
      }
      return {};
    unit_of_measurement: "°C"
    icon: "mdi:thermometer"
    device_class: "temperature"
    state_class: "measurement"
    update_interval: ${sensor_interval}
    accuracy_decimals: 2

  - platform: template
    name: Humidity
    id: humidity
    lambda: |-
      if (id(sen55_calibrated_humidity).has_state() && id(co2_calibrated_humidity).has_state()) {
        return (id(sen55_calibrated_humidity).state + id(co2_calibrated_humidity).state) / 2;
      }
      return {};
    unit_of_measurement: "%"
    icon: "mdi:water-percent"
    device_class: "humidity"
    state_class: "measurement"
    update_interval: ${sensor_interval}
    accuracy_decimals: 2

  - platform: wifi_signal
    name: "Wifi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP
    ssid:
      name: SSID
      id: wifi_ssid
    bssid:
      name: BSSID
    mac_address:
      name: MAC
    dns_address:
      name: DNS

  - platform: template
    name: "VOC IAQ Classification"
    id: iaq_voc
    icon: "mdi:checkbox-marked-circle-outline"
    lambda: |-
      if (int(id(voc).state) < 100.0) {
        return {"Great"};
      }
      else if (int(id(voc).state) <= 200.0) {
        return {"Good"};
      }
      else if (int(id(voc).state) <= 300.0) {
        return {"Light"};
      }
      else if (int(id(voc).state) <= 400.0) {
        return {"Moderate"};
      }
      else if (int(id(voc).state) <= 500.0) {
        return {"Heavy"};
      }
      else {
        return {"unknown"};
      }

  - platform: template
    name: "NOX IAQ Classification"
    id: iaq_nox
    icon: "mdi:checkbox-marked-circle-outline"
    lambda: |-
      if (int(id(nox).state) < 100.0) {
        return {"Great"};
      }
      else if (int(id(nox).state) <= 200.0) {
        return {"Good"};
      }
      else if (int(id(nox).state) <= 300.0) {
        return {"Light"};
      }
      else if (int(id(nox).state) <= 400.0) {
        return {"Moderate"};
      }
      else if (int(id(nox).state) <= 500.0) {
        return {"Heavy"};
      }
      else {
        return {"unknown"};
      }

binary_sensor:
  - platform: gpio
    name: Button A
    pin:
      number: GPIO0
      ignore_strapping_warning: true
      mode:
        input: true
      inverted: true
    on_press:
      then:
        - component.update: disp

  - platform: gpio
    pin:
      number: GPIO08
      mode:
        input: true
        pullup: true
      inverted: true
    name: Button B

  - platform: gpio
    pin:
      number: GPIO46
      ignore_strapping_warning: true
    name: Button Hold

  - platform: gpio
    pin: GPIO42
    name: Button Power

button:
  - platform: restart
    name: Restart

  - platform: template
    name: "CO2 Force Manual Calibration"
    entity_category: "config"
    on_press:
      then:
        - scd4x.perform_forced_calibration:
            value: !lambda 'return id(co2_cal).state;'

  - platform: template
    name: "SEN55 Force Manual Clean"
    entity_category: "config"
    on_press:
      then:
        - sen5x.start_fan_autoclean: sen55

  - platform: template
    name: "Calibrate Temperature & Humidity"
    on_press:
      then:
        - script.execute: calibrate_sensors

number:
  - platform: template
    name: "CO2 Calibration Value"
    optimistic: true
    min_value: 400
    max_value: 1000
    step: 5
    id: co2_cal
    icon: "mdi:molecule-co2"
    entity_category: "config"

  # Reference values for calibration
  - platform: template
    name: "Reference Temperature"
    id: reference_temperature
    restore_value: true
    initial_value: 23.0
    min_value: 0.0
    max_value: 50.0
    entity_category: "config"
    unit_of_measurement: "°C"
    optimistic: true
    update_interval: never
    step: 0.1
    mode: box
    on_value:
      then:
        - script.execute: calibrate_sensors

  - platform: template
    name: "Reference Humidity"
    id: reference_humidity
    restore_value: true
    initial_value: 50.0
    min_value: 0.0
    max_value: 100.0
    entity_category: "config"
    unit_of_measurement: "%"
    optimistic: true
    update_interval: never
    step: 0.1
    mode: box
    on_value:
      then:
        - script.execute: calibrate_sensors

script:
  - id: calibrate_sensors
    then:
      - logger.log: "Running sensor calibration with reference values"
      - lambda: |-
          // Check if all required sensors have state
          if (!id(sen55_temperature).has_state() || !id(CO2_temperature).has_state() || 
              !id(sen55_humidity).has_state() || !id(CO2_humidity).has_state() ||
              !id(reference_temperature).has_state() || !id(reference_humidity).has_state()) {
            ESP_LOGW("calibration", "Cannot calibrate - some sensors don't have values yet");
            return;
          }
          
          // Get reference values
          float ref_temp = id(reference_temperature).state;
          float ref_humidity = id(reference_humidity).state;
          
          // Calculate temperature calibration factors
          if (id(sen55_temperature).state > 0) {
            // Calculate proportional factor (reference / current)
            float new_sen55_temp_factor = ref_temp / id(sen55_temperature).state;
            id(sen55_temp_factor) = new_sen55_temp_factor;
            ESP_LOGI("calibration", "SEN55 temperature factor: %.4f", new_sen55_temp_factor);
          }
          
          if (id(CO2_temperature).state > 0) {
            float new_co2_temp_factor = ref_temp / id(CO2_temperature).state;
            id(co2_temp_factor) = new_co2_temp_factor;
            ESP_LOGI("calibration", "CO2 temperature factor: %.4f", new_co2_temp_factor);
          }
          
          // Calculate humidity calibration factors
          if (id(sen55_humidity).state > 0) {
            float new_sen55_humidity_factor = ref_humidity / id(sen55_humidity).state;
            id(sen55_humidity_factor) = new_sen55_humidity_factor;
            ESP_LOGI("calibration", "SEN55 humidity factor: %.4f", new_sen55_humidity_factor);
          }
          
          if (id(CO2_humidity).state > 0) {
            float new_co2_humidity_factor = ref_humidity / id(CO2_humidity).state;
            id(co2_humidity_factor) = new_co2_humidity_factor;
            ESP_LOGI("calibration", "CO2 humidity factor: %.4f", new_co2_humidity_factor);
          }
          
          // Update the display sensors to show the new factors
          if (id(sen55_temp_factor_sensor) != nullptr)
            id(sen55_temp_factor_sensor).publish_state(id(sen55_temp_factor));
          if (id(co2_temp_factor_sensor) != nullptr)
            id(co2_temp_factor_sensor).publish_state(id(co2_temp_factor));
          if (id(sen55_humidity_factor_sensor) != nullptr)
            id(sen55_humidity_factor_sensor).publish_state(id(sen55_humidity_factor));
          if (id(co2_humidity_factor_sensor) != nullptr)
            id(co2_humidity_factor_sensor).publish_state(id(co2_humidity_factor));
          
          ESP_LOGI("calibration", "Calibration complete!");
      - logger.log: "Calibration completed successfully"

display:
  - platform: waveshare_epaper
    model: 1.54inv2
    id: disp
    cs_pin: GPIO04
    dc_pin: GPIO03
    reset_pin: GPIO02
    busy_pin:
      number: GPIO01
      inverted: false
    full_update_every: 1  # Force full refresh every time
    reset_duration: 50ms
    update_interval: 60s
    lambda: |-
      // Clear the display
      it.fill(COLOR_OFF);
      
      // Get display dimensions
      int width = it.get_width();
      int height = it.get_height();
      int halfWidth = width / 2;
      int halfHeight = height / 2;
      
      // Draw only essential dividers - vertical middle line and left half horizontal
      it.line(halfWidth, 0, halfWidth, height);               // Vertical divider
      it.line(0, halfHeight, halfWidth, halfHeight);          // Left half horizontal divider
      
      // *** TOP-LEFT BOX: Time, Date, Device Name and Last Updated ***
      auto now = id(sntp_time).now();
      char time_str[6];
      sprintf(time_str, "%02d:%02d", now.hour, now.minute);
      it.print(8, 6, id(f24), TextAlign::TOP_LEFT, time_str);
      
      char date_str[11];
      sprintf(date_str, "%04d-%02d-%02d", now.year, now.month, now.day_of_month);
      it.print(8, 35, id(f16), TextAlign::TOP_LEFT, date_str);
      
      // Device name
      it.print(8, 55, id(f16), TextAlign::TOP_LEFT, "${devicename}");
      
      // Last updated timestamp
      char updated_str[30];
      sprintf(updated_str, "Upd: %02d:%02d:%02d", now.hour, now.minute, now.second);
      it.print(8, 75, id(f14), TextAlign::TOP_LEFT, updated_str);
      
      // *** BOTTOM-LEFT BOX: SCD40 Readings ***
      it.print(8, halfHeight + 5, id(f16), TextAlign::TOP_LEFT, "SCD40");
      
      // CO2
      if (id(CO2)->has_state()) {
        char co2_str[20];
        sprintf(co2_str, "CO2: %d", (int)id(CO2).state);
        it.print(8, halfHeight + 25, id(f16), TextAlign::TOP_LEFT, co2_str);
      } else {
        it.print(8, halfHeight + 25, id(f16), TextAlign::TOP_LEFT, "CO2: nan");
      }
      
      // Temperature
      if (id(temperature)->has_state()) {
        char temp_str[20];
        sprintf(temp_str, "Temp: %.2f", id(temperature).state);
        it.print(8, halfHeight + 45, id(f16), TextAlign::TOP_LEFT, temp_str);
      } else {
        it.print(8, halfHeight + 45, id(f16), TextAlign::TOP_LEFT, "Temp: nan");
      }
      
      // Humidity
      if (id(humidity)->has_state()) {
        char hum_str[20];
        sprintf(hum_str, "RH: %.2f", id(humidity).state);
        it.print(8, halfHeight + 65, id(f16), TextAlign::TOP_LEFT, hum_str);
      } else {
        it.print(8, halfHeight + 65, id(f16), TextAlign::TOP_LEFT, "RH: nan");
      }
      
      // *** RIGHT COLUMN: ALL SEN55 READINGS ***
      it.print(halfWidth + 8, 6, id(f16), TextAlign::TOP_LEFT, "SEN55");
      
      // Reduced line spacing to fit everything
      int rightCol = halfWidth + 8;
      int rightStart = 26;
      int lineHeight = 19;  // Reduced line spacing
      
      // PM 1.0
      if (id(PM1_0)->has_state()) {
        char pm1_str[20];
        sprintf(pm1_str, "PM1.0: %.2f", id(PM1_0).state);
        it.print(rightCol, rightStart, id(f16), TextAlign::TOP_LEFT, pm1_str);
      } else {
        it.print(rightCol, rightStart, id(f16), TextAlign::TOP_LEFT, "PM1.0: nan");
      }
      
      // PM 2.5
      if (id(PM2_5)->has_state()) {
        char pm25_str[20];
        sprintf(pm25_str, "PM2.5: %.2f", id(PM2_5).state);
        it.print(rightCol, rightStart + lineHeight, id(f16), TextAlign::TOP_LEFT, pm25_str);
      } else {
        it.print(rightCol, rightStart + lineHeight, id(f16), TextAlign::TOP_LEFT, "PM2.5: nan");
      }
      
      // PM 4.0
      if (id(PM4_0)->has_state()) {
        char pm4_str[20];
        sprintf(pm4_str, "PM4.0: %.2f", id(PM4_0).state);
        it.print(rightCol, rightStart + lineHeight*2, id(f16), TextAlign::TOP_LEFT, pm4_str);
      } else {
        it.print(rightCol, rightStart + lineHeight*2, id(f16), TextAlign::TOP_LEFT, "PM4.0: nan");
      }
      
      // PM 10
      if (id(PM10_0)->has_state()) {
        char pm10_str[20];
        sprintf(pm10_str, "PM10: %.2f", id(PM10_0).state);
        it.print(rightCol, rightStart + lineHeight*3, id(f16), TextAlign::TOP_LEFT, pm10_str);
      } else {
        it.print(rightCol, rightStart + lineHeight*3, id(f16), TextAlign::TOP_LEFT, "PM10: nan");
      }
      
      // VOC
      if (id(voc)->has_state()) {
        char voc_str[20];
        sprintf(voc_str, "VOC: %.2f", id(voc).state);
        it.print(rightCol, rightStart + lineHeight*4, id(f16), TextAlign::TOP_LEFT, voc_str);
      } else {
        it.print(rightCol, rightStart + lineHeight*4, id(f16), TextAlign::TOP_LEFT, "VOC: nan");
      }
      
      // NOX
      if (id(nox)->has_state()) {
        char nox_str[20];
        sprintf(nox_str, "NOX: %.2f", id(nox).state);
        it.print(rightCol, rightStart + lineHeight*5, id(f16), TextAlign::TOP_LEFT, nox_str);
      } else {
        it.print(rightCol, rightStart + lineHeight*5, id(f16), TextAlign::TOP_LEFT, "NOX: nan");
      }
      
      // WIFI label with colon
      it.print(rightCol, rightStart + lineHeight*6, id(f16), TextAlign::TOP_LEFT, "WiFi:");
      
      // WiFi SSID with smaller font to prevent cutting off
      if (id(wifi_signal_db)->has_state() && id(wifi_ssid) != nullptr && id(wifi_ssid)->has_state()) {
        // Use smaller font for SSID to ensure it fits
        it.print(rightCol, rightStart + lineHeight*7, id(f14), TextAlign::TOP_LEFT, id(wifi_ssid)->state.c_str());
      } else {
        it.print(rightCol, rightStart + lineHeight*7, id(f14), TextAlign::TOP_LEFT, "no set");
      }

font:
  - file:
      type: gfonts
      family: Noto Sans Display
      weight: 500
    id: f16
    size: 16
    glyphs: &common_glyphs 
      - "&"
      - "@"
      - "!"
      - ","
      - "."
      - "\""
      - "%"
      - "("
      - ")"
      - "+"
      - "-"
      - "_"
      - ":"
      - "°"
      - "0"
      - "1"
      - "2"
      - "3"
      - "4"
      - "5"
      - "6"
      - "7"
      - "8"
      - "9"
      - "A"
      - "B"
      - "C"
      - "D"
      - "E"
      - "F"
      - "G"
      - "H"
      - "I"
      - "J"
      - "K"
      - "L"
      - "M"
      - "N"
      - "O"
      - "P"
      - "Q"
      - "R"
      - "S"
      - "T"
      - "U"
      - "V"
      - "W"
      - "X"
      - "Y"
      - "Z"
      - " "
      - "a"
      - "b"
      - "c"
      - "d"
      - "e"
      - "f"
      - "g"
      - "h"
      - "i"
      - "j"
      - "k"
      - "l"
      - "m"
      - "n"
      - "o"
      - "p"
      - "q"
      - "r"
      - "s"
      - "t"
      - "u"
      - "v"
      - "w"
      - "x"
      - "y"
      - "z"
      - "å"
      - "ä"
      - "ö"
      - "/"
      - "µ"
      - "³"
      - "'"

  - file:
      type: gfonts
      family: Noto Sans Display
      weight: 500
    id: f18
    size: 18
    glyphs: *common_glyphs

  - file:
      type: gfonts
      family: Noto Sans Display
      weight: 500
    id: f24
    size: 24
    glyphs: *common_glyphs

  - file:
      type: gfonts
      family: Noto Sans Display
      weight: 500
    id: f14
    size: 14
    glyphs: *common_glyphs
